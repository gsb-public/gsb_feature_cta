<?php

/**
 * @file
 * Code for the GSB Feature CTA feature.
 */

include_once 'gsb_feature_cta.features.inc';


/**
 * Implements hook_entity_info_alter().
 */
function gsb_feature_cta_entity_info_alter(&$entity_info) {
  $entity_info['fieldable_panels_pane']['bundles']['cta'] = array(
    'label' => t('CTA'),
    'pane category' => t('GSB panes'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 10,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/cta',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

// Formatter

/**
 * Implements hook_field_formatter_info().
 *
 * Here we tell Drupal about our custom field formatter -
 * 'gsb_slideshow_default_format'.
 */
function gsb_feature_cta_field_formatter_info() {
  return array(
    'gsb_cta_default_format' => array(
      'label' => t('Field Collection CTA'),
      'field types' => array('field_collection'),
      'settings' => array('view_mode' => 'full'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_feature_cta_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Get a metadata wrapper for the entity.
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  // Determine the CTA style and corresponding style class.
  $style = $wrapper->field_cta_style->value();

  // Build a container for the items.
  if (!empty($items)) {
    $element = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'cta-wrapper',
          $style,
        ),
      ),
    );
  }
  // Loop through each item, adding a link.
  foreach ($items as $delta => $item) {
    if ($field_collection = $wrapper->field_cta_item->get($delta)) {
      // Build up a link title with the structure of <span>ACTION</span><b>TITLE</b>
      $title = '';
      try {
        $title .= '<span>' . $field_collection->field_cta_action_item->label() . '</span>';
        $title .= $field_collection->field_link_single->title->value();
      } catch (Exception $e) {
        continue;
      }

      //parse url and pass query as an option to fix url encoding resulting broken links
      $url_parts = drupal_parse_url($field_collection->field_link_single->url->value());
      $decoded_url = urldecode($field_collection->field_link_single->url->value());
      $query_arr[] = '';
      if (strpos($decoded_url, '[]') !== false) {
        $decoded_url_parts = explode( '?' , $decoded_url);
        $query_parts = explode('&' ,$decoded_url_parts[1]);
        foreach($query_parts as $str) {
          ;
          $query_params = explode('=' , $str);
          $query_arr[$query_params[0]] = $query_params[1];
        }
      } else  {
        $query_arr = (!empty($url_parts['query']) ? $url_parts['query'] : '');
      }

        // Add a link render array, allowing HTML in the title.
        $element[$delta] = array(
          '#type' => 'link',
          //'#href' => $field_collection->field_link_single->url->value(),
          '#href' => $url_parts['path'],
          '#title' => $title,
          '#options' => array(
            'html' => TRUE,
            //'query' => (!empty($url_parts['query']) ? $url_parts['query'] : '') ,
            'query' => $query_arr,
          ),
          '#attributes' => array(
              'class' => array(
                "item-$delta",
                'cta-link',
              ),
            ) + $field_collection->field_link_single->attributes->value(),
        );
    }
  }
  return $element;
}

/**
 * Implements hook_form_alter().
 */
function gsb_feature_cta_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' &&
      isset($form['#bundle']) && $form['#bundle'] == 'cta') {
    $form['#validate'][] = "gsb_feature_cta_validate";
  }
}

function gsb_feature_cta_validate($form, &$form_state) {
  if (isset($form['#bundle']) && $form['#bundle'] == 'cta') {
    $language = $form['language']['#value'];
    foreach ($form_state['values']['field_cta_item'][$language] as $index => $data) {
      if (is_integer($index)) {
        $value = $form_state['values']['field_cta_item'][$language][$index]['field_cta_action_item'][$language][0]['tid'];
        if ($value == null) {
          form_set_error('field_cta_item][' . $language . '][' . $index . '][field_cta_action_item', t('Please select an action.'));
        }
      }
    }
  }
}
